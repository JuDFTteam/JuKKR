###############################################################################
####          continuous integration setting of the JuKKR codes            ####
###############################################################################

# docker image containing Developlement Tools and the current Intel compilers based on CentOS 7 with cmake
image: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/extended_intel2016

before_script:
  # set +e prevents sourced scripts from aborting if single commands fail (GitLab CI sets `-e` by default)
  - set +e && source compilervars.sh intel64 && set -e
  # set environment variables to avoind stack size issue
  - export OMP_NUM_THREADS=1
  - export OMP_STACKSIZE=1g
  - ulimit -s unlimited
  # install pip and numpy
  - pip install numpy || curl -O https://bootstrap.pypa.io/get-pip.py && python get-pip.py && pip install numpy

stages: 
  - test
  # kkrhost stages
  - build_kkrhost
  - run_kkrhost_serial
  - run_kkrhost_parallel
  - run_kkrhost_features
  - run_kkrhost_features_SOC
  - verify_kkrhost
  - deploy:codecov_kkrhost
  - deploy:doc_kkrhost
  # kkrimp stages
  - build_kkrimp
  - run_kkrimp_parallel
  - run_kkrimp_features
  - verify_kkrimp
  # kkrsusc stages 
    # to be implemented ...
  # pkkprime stages
  - build_pkkprime
    # run and verift stages not defined yet
  # voronoi stages
  - build_voronoi
  - run_voronoi
    # verify stage not defined yet

###############################################################################

test:intel:
  stage: test
  script:
    # test if dependencies are working
    - echo 'do some tests here'
    - which ifort
    - which mpiifort
    - which gfortran
    - which profmerge
    - which codecov || which Codecov
    # needs to be implemented (tests for dependencies e.g. MPI, OpenMP, LAPACK, etc.)

###############################################################################
# include build / run / verify scripts for all codes

include:
    ### 1. build codes ###
    - tests/gitlab-ci/build_kkrhost.yml
    - tests/gitlab-ci/build_kkrimp.yml
    #- tests/gitlab-ci/build_kkrsusc.yml
    - tests/gitlab-ci/build_pkkprime.yml
    - tests/gitlab-ci/build_voronoi.yml
    ### 2. run tests ###
    - tests/gitlab-ci/run_kkrhost.yml
    - tests/gitlab-ci/run_kkrimp.yml
    #- tests/gitlab-ci/run_kkrsusc.yml
    #- tests/gitlab-ci/run_pkkprime.yml
    - tests/gitlab-ci/run_voronoi.yml
    ### 3. verify results ###
    - tests/gitlab-ci/verify_kkrhost.yml
    - tests/gitlab-ci/verify_kkrimp.yml
    #- tests/gitlab-ci/verify_kkrsusc.yml
    #- tests/gitlab-ci/verify_pkkprime.yml
    #- tests/gitlab-ci/verify_voronoi.yml

###############################################################################
# for Gitlab pages (online code documentation build with ford)

codecov:
  stage: deploy:codecov_kkrhost
  allow_failure: true
  script:
    - cd build && ls -ltr
    - profmerge
    - codecov -spi pgopti.spi -dpi pgopti.dpi
    - tar -zcvf ../cov.tar.gz CODE_COVERAGE.HTML CodeCoverage
    - rm -rf *.dyn pgopti.spi pgopti.dpi
  artifacts:
    paths:
      - cov.tar.gz
  only: 
    - schedules
    - triggers
    - web


pages:
  stage: deploy:doc_kkrhost
  image: iffregistry.fz-juelich.de/docker-images/kkr-pages:latest
  allow_failure: true
  script:
    - ford settings_ford.md
    - mv doc/ public/
    # add code coverage
    # this is deactivated since otherwise the source code can be seen without login
    #- tar -zxvf cov.tar.gz && mv CODE_COVERAGE.HTML public/page/codecov/index.html && mv CodeCoverage public/page/codecov/CodeCoverage
  artifacts:
    paths:
      - public
  only: 
    - schedules
    - triggers
    - web
