if(CMAKE_Fortran_COMPILER_ID MATCHES Intel)

    message("Intel compiler found")
    set(compver "intel")

    # standard compiler flags
    set(CMAKE_Fortran_FLAGS         "${CMAKE_Fortran_FLAGS} -traceback")

    # increase stacksize on mac
    if(CMAKE_SYSTEM_NAME MATCHES Darwin)
        message("Adding stack size flags for Intel compiler on mac")
        set(CMAKE_Fortran_FLAGS         "${CMAKE_Fortran_FLAGS} -Wl,-stack_size,0x80000000,-stack_addr,0xf0000000")
    endif()

    # link serial or parallel mkl
    if(ENABLE_OMP)
        set(CMAKE_Fortran_FLAGS         "${CMAKE_Fortran_FLAGS} -mkl=parallel")
    else()
        set(CMAKE_Fortran_FLAGS         "${CMAKE_Fortran_FLAGS} -mkl=sequential")
    endif()

    # debug flags
    set(CMAKE_Fortran_FLAGS_DEBUG   "-O0 -r8 -CB -check all -check uninit -ftrapuv -gen-interfaces -warn all -warn notruncated_source -fpe0 -debug extended -traceback -g -sox")
    #set(CMAKE_Fortran_FLAGS_DEBUG   "-O0 -r8 -CB -check all -check uninit -gen-interfaces -warn all -warn notruncated_source -debug extended -traceback -g -sox")

    # release flags
    set(CMAKE_Fortran_FLAGS_RELEASE "-O2 -r8 -ip -xHOST")

    # for coverage report
    if(ENABLE_COV)
        message("Set profiling flags for test coverage report")
        set(CMAKE_Fortran_FLAGS     "${CMAKE_Fortran_FLAGS} -prof-gen:srcpos")
    endif()

    # the old compiler (e.g. v12.1.3 on iff003) does not recognize
    # the 'execute_command_line' call, here we have to use the 'system' call
    # instead which is triggered with the preprocessor flag below
    if(CMAKE_Fortran_COMPILER_VERSION VERSION_LESS "15.0.1")
        add_definitions(-DCPP_OLDCOMP)
    endif()

elseif(CMAKE_Fortran_COMPILER_ID MATCHES GNU)

    message("GNU compiler found")
    set(compver "gnu")

    # standard compiler flags
    #set(CMAKE_Fortran_FLAGS         "${CMAKE_Fortran_FLAGS} -ffree-line-length-none -fdefault-real-8 -fimplicit-none")
    set(CMAKE_Fortran_FLAGS         "${CMAKE_Fortran_FLAGS} -lblas -llapack -ffree-line-length-none -fdefault-real-8 -fimplicit-none")

    # debug flags # -finit-local-zero
    set(CMAKE_Fortran_FLAGS_DEBUG   "-O0 -g3 -fcheck=all -fbacktrace -Wall -Wextra -mtune=native")

    # release flags
    set(CMAKE_Fortran_FLAGS_RELEASE "-Ofast -march=native -fbacktrace")

    # flags for code-coverage
    if(ENABLE_COV)
        message("Set profiling flags for test coverage report")
        set(CMAKE_Fortran_FLAGS     "${CMAKE_Fortran_FLAGS} -fprofile-arcs -ftest-coverage -fPIC")
    endif()

    # disable MD5 sums for GNU compiler
    add_definitions(-DCPP_NOMD5)

   # lapack lib on iff machines
   #set(MKLROOT "/usr/local/intel/mkl")
   #find_package(BLAS REQUIRED)
   #message("Found BLAS version ${BLAS_VERSION}")
   #find_package(LAPACK REQUIRED)
   #message("Found LAPACK version ${LAPACK_VERSION}")

   find_package(BLAS)
   find_package(LAPACK)
   if(LAPACK_FOUND AND BLAS_FOUND)
      set(lapackblas_libraries ${BLAS_LIBRARIES} ${LAPACK_LIBRARIES})
   endif()
  

   #set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -m64 -I${MKLROOT}/include -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_gf_lp64.a ${MKLROOT}/lib/intel64/libmkl_sequential.a ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -lpthread -lm -ldl")
   #set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_gf_lp64.a ${MKLROOT}/lib/intel64/libmkl_sequential.a ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -lpthread -lm -ldl -m64 -I${MKLROOT}/include ")

elseif(CMAKE_Fortran_COMPILER_ID MATCHES NAG)

    message("NAG compiler found")
    set(CMAKE_Fortran_FLAGS         "${CMAKE_Fortran_FLAGS} -Imodules -L/usr/local/intel/mkl/lib/intel64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core")
    set(CMAKE_Fortran_FLAGS_DEBUG   "-O0 -C=all")
    set(CMAKE_Fortran_FLAGS_RELEASE "-O3")
    # disable MD5 sums for gnu compiler
    add_definitions(-DCPP_NOMD5)
    set(compver "nag")

endif()
