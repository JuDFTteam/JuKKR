C*==rhoval.f    processed by SPAG 6.05Rc at 11:22 on 10 May 2004
      SUBROUTINE RHOVAL(IHOST,LDORHOEF,ICST,INS,IELAST,NSRA,
     &                  ISPIN,NSPIN,NSPINPOT,
     &                  I1,EZ,WEZ,DRDI,R,VINS,VISP,ZAT,IPAN,IRCUT,IRMIN,
     &                  THETAS,IFUNM,LMSP,RHO2NS,R2NEF,RHOORB,DEN,MUORB,
     &                  ESPV,CLEB,LOFLM,ICLEB,IEND,JEND,SOLVER,SOCTL,
     &                  CTL,VTREL,BTREL,RMREL,DRDIREL,R2DRDIREL,ZREL,
     &                  JWSREL,IRSHIFT,ITERMVDIR,QMTET,QMPHI,
     &                  MVEVIL,MVEVILEF,NMVECMAX,
     &                  IDOLDAU,LOPT,PHILDAU,WLDAU,DENMATC)
C
C **********************************************************************
C * For KREL = 1 (relativistic mode)                                   *
C *                                                                    *
C *  NPOTD = 2 * NATYPD                                                *
C *  LMMAXD = 2 * (LMAXD+1)^2                                          *
C *  NSPIND = 1                                                        *
C *                                                                    *
C *  LDA+U implementation     Mar. 2002-Dec.2004                       *
C *                           ph.mavropoulos, h. ebert, v. popescu     *
C * Notes:                                                             *
C *  average WLDAU for spherical wavefunctions:                        *
C *  The spherical part of the d or f wavefunction is found by adding  *
C *  the average interaction potential WLDAUAV to the spherical        *
C *  potential. Then the non-spherical parts are found by using only   *
C *  the deviation of WLDAU from the average. This speeds up the       *
C *  convergence of the Born series. See also subroutines              *
C *  regsol, pnstmat and pnsqns                                        *
C *                                                                    *
C **********************************************************************
      IMPLICIT NONE
C
C     .. Parameters ..
      INCLUDE 'inc.p'
      INTEGER LMXSPD
      PARAMETER (LMXSPD= (2*LPOTD+1)**2)
      INTEGER LMMAXD
      PARAMETER (LMMAXD= (KREL+1) * (LMAXD+1)**2)
      INTEGER LMAXD1
      PARAMETER (LMAXD1= LMAXD+1)
      INTEGER LMPOTD
      PARAMETER (LMPOTD= (LPOTD+1)**2)
      INTEGER IRMIND
      PARAMETER (IRMIND=IRMD-IRNSD)
      INTEGER MMAXD
      PARAMETER ( MMAXD = 2*LMAXD+1 )
      INTEGER LM2D
      PARAMETER (LM2D= (2*LMAXD+1)**2)
      DOUBLE PRECISION CVLIGHT
      PARAMETER (CVLIGHT=274.0720442D0)
      DOUBLE COMPLEX CONE 
      PARAMETER ( CONE=(1D0,0D0) )
C     ..
C     .. Scalar Arguments ..
      DOUBLE PRECISION ZAT
      INTEGER I1,ICST,IELAST,IEND,INS,IPAN,ISPIN,NSPIN,NSPINPOT,NSRA
      INTEGER JWSREL,ZREL,IRSHIFT,IDOLDAU,LOPT
      INTEGER IHOST,NMVECMAX,IRMIN
      LOGICAL LDORHOEF
C
C     IHOST = 1   < -- this routine is called by the HOST tbkkr-program
C     IHOST <> 1  < --                 called by the IMPURITY program
C
C     ..
C     .. Array Arguments ..
      DOUBLE COMPLEX DEN(0:LMAXD1,IEMXD*(1+KREL)),EZ(IEMXD),
     +               WEZ(IEMXD),DENMATC(MMAXD,MMAXD)
C     .. first 2 indices in dmuorb are the spin-resolved contributions,
C     .. the 3rd one should be the sum of them 
      DOUBLE COMPLEX DMUORB(0:KREL*LMAXD+(1-KREL),3)
      DOUBLE PRECISION MUORB(0:LMAXD1+1,3)
      DOUBLE COMPLEX PHILDAU(IRMD)
      DOUBLE PRECISION CLEB(NCLEB,2),DRDI(IRMD),
     +                 ESPV(0:LMAXD1,2),    ! changed for REL case
     +                 R(IRMD),RHO2NS(IRMD,LMPOTD,2),
     +                 R2NEF(IRMD,LMPOTD,2),   ! at fermi energy
     +                 THETAS(IRID,NFUND),VINS(IRMIND:IRMD,LMPOTD),
     +                 VISP(IRMD)
      DOUBLE PRECISION RHOORB(IRMD*KREL + (1-KREL))
      DOUBLE PRECISION SOCTL(KREL*LMAXD+1),CTL(KREL*LMAXD+1)
      DOUBLE PRECISION VTREL(IRMD*KREL+(1-KREL))
      DOUBLE PRECISION BTREL(IRMD*KREL+(1-KREL))
      DOUBLE PRECISION DRDIREL(IRMD*KREL+(1-KREL)),
     &                 R2DRDIREL(IRMD*KREL+(1-KREL)),
     &                 RMREL(IRMD*KREL+(1-KREL))
      DOUBLE PRECISION WLDAU(MMAXD,MMAXD,NSPIND)
      CHARACTER*10 SOLVER
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC 
C      ITERMDIR variables
C
      LOGICAL ITERMVDIR
      DOUBLE PRECISION QMTET,QMPHI
      COMPLEX*16 MVEVIL(0:LMAXD,3,NMVECMAX) ! OUTPUT
      COMPLEX*16 MVEVILEF(0:LMAXD,3,NMVECMAX) ! OUTPUT
C
C      ITERMDIR variables
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC 
      INTEGER ICLEB(NCLEB,4),IFUNM(LMXSPD),IRCUT(0:IPAND),
     +        JEND(LMPOTD,0:LMAXD,0:LMAXD),
     +        LMSP(LMXSPD),LOFLM(LM2D)
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION WLDAUAV
      DOUBLE COMPLEX DF,ERYD,EK
      INTEGER IDIM,IE,IR,L,LM1,LM2,LMHI,LMLO,IREC,ISPINPOT,
     &        LASTEZ,M1,MMAX
C     .. this routine needs irregular wavefunctions
      LOGICAL LIRRSOL
      PARAMETER ( LIRRSOL = .TRUE. )
C     ..
C     .. Local Arrays ..
      DOUBLE COMPLEX ALPHA(0:LMAXD),AR(LMMAXD,LMMAXD),CR(LMMAXD,LMMAXD),
     +               DR(LMMAXD,LMMAXD),
     +               EKL(0:LMAXD),FZ(IRMD,0:LMAXD),
     +               GMATLL(LMMAXD,LMMAXD,IEMXD),
     +               GMAT0(LMMAXD,LMMAXD),
     +               PNS(LMMAXD,LMMAXD,IRMIND:IRMD,2),PZ(IRMD,0:LMAXD),
     +               QNS(LMMAXD,LMMAXD,IRMIND:IRMD,2),QZ(IRMD,0:LMAXD),
     +               SZ(IRMD,0:LMAXD),TMAT(0:LMAXD)
      DOUBLE PRECISION RS(IRMD,0:LMAXD),S(0:LMAXD)
      DOUBLE PRECISION CUTOFF(IRMD)
      DOUBLE COMPLEX DENDUM(0:LMAXD1)
C     ..
C     .. External Subroutines ..
      EXTERNAL DAXPY,DSCAL,CRADWF,DRVRHO,PNSQNS,RHOLM,
     +         RHONS,WFMESH
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC ATAN,DBLE,DIMAG,SQRT
C     ..
CMPI  INTEGER MYRANK,NROFNODES
CMPI  INTEGER MAPBLOCK
CMPI  EXTERNAL MAPBLOCK
CMPI  COMMON /MPI/MYRANK,NROFNODES
C     ..
C     ..................................................................
C
C ==LDAULDAULDAULDAULDAULDAULDAULDAULDAULDAULDAULDAULDAULDAULDAULDAULDAU
C 
      IF ( IDOLDAU.EQ.1 ) THEN
         WLDAUAV = 0.D0
         LMLO = LOPT*LOPT + 1
         LMHI = (LOPT+1)*(LOPT+1)
         MMAX = LMHI - LMLO + 1
         DO M1 = 1,MMAX                                        
            WLDAUAV = WLDAUAV + WLDAU(M1,M1,ISPIN)         
         ENDDO                                                 
         WLDAUAV = WLDAUAV/DBLE(MMAX)                        
C
C -> Note: Application if WLDAU makes the potential discontinuous.
C    A cutoff can be used if necessary to make the potential continuous
C    for example (array bounds should be adjusted):
C
Cccc            CUTOFF(IR) = ( 1.D0 + DEXP( 20.D0*(R(IR)-R(349)) ) ) *
Cccc     &                   ( 1.D0 + DEXP( 20.D0*(R(276)-R(IR)) ) )
Cccc            CUTOFF(IR) = 1D0/CUTOFF(IR)
C
         DO M1 = 1,IRMD
            CUTOFF(M1) = 1.D0
         END DO
      END IF                                                    
C
C ==LDAULDAULDAULDAULDAULDAULDAULDAULDAULDAULDAULDAULDAULDAULDAULDAULDAU
C
C IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
C initialise variables 
C
C ======================================================================
      IF ( KREL.EQ.0 ) THEN
         DO LM1 = 1,LMPOTD
            DO IR = 1,IRMD
               RHO2NS(IR,LM1,ISPIN) = 0.0D0
            END DO
         END DO
C     
         DO L = 0,LMAXD1
            ESPV(L,ISPIN) = 0.0D0
         END DO
C ======================================================================
      ELSE
C ======================================================================
         DO ISPINPOT = 1,2
            DO LM1 = 1,LMPOTD
               DO IR = 1,IRMD
                  RHO2NS(IR,LM1,ISPINPOT) = 0.0D0
                  R2NEF(IR,LM1,ISPINPOT)  = 0.0D0
               END DO
            END DO
C     
            DO L = 0,LMAXD1
               ESPV(L,ISPINPOT) = 0.0D0
            END DO
C     
         END DO
C     
         DO IR = 1,IRMD
            RHOORB(IR) = 0.0D0
         END DO
C     
         DO IR = 1,3 
            DO L = 0,LMAXD
               DMUORB(L,IR) = (0.0D0,0.0D0)
            END DO
C
            DO L = 0,LMAXD1 + 1
               MUORB(L,IR) = 0.0D0
            END DO
         END DO
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C      ITERMDIR
C
         IF (ITERMVDIR) THEN
            DO LM1 = 1,3
               DO LM2 = 1, NMVECMAX
                  DO L = 0, LMAXD
                     MVEVIL(L,LM1,LM2) = (0.0D0,0.0D0)
                     MVEVILEF(L,LM1,LM2) = (0.0D0,0.0D0)
                  END DO
               END DO
            END DO
         END IF
C     
C      ITERMDIR
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      END IF                    ! KREL = 0/1
C ======================================================================
      LASTEZ = IELAST
C
C end initialise variables 
C IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
C
C
C EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
C
      OPEN(30,   ! lm-dos
     +FILE="lmdos."//char(48+I1/10)//char(48+mod(I1,10))//"."//   ! lm-dos
     +char(48+ISPIN)//".dat")   ! lm-dos
      WRITE (30,*) ' '   ! lm-dos
      WRITE (30,8600) '# ISPIN=',ISPIN,' I1=',I1   ! lm-dos
 8600 FORMAT (a8,I3,a4,I5)  ! lm-dos

      DO IE = 1,IELAST
CMPI     IF(MYRANK.EQ.MAPBLOCK(IE,1,IELAST,1,0,NROFNODES-1)) THEN
C
         IREC = IE + IELAST*(ISPIN-1) + IELAST*NSPIN* (I1-1)
         READ(69,REC=IREC) GMAT0
C
         DO LM2 = 1,LMMAXD
            DO LM1 = 1,LMMAXD
               GMATLL(LM1,LM2,IE) = GMAT0(LM1,LM2)
            END DO
         END DO
C
         ERYD = EZ(IE)
         DF = WEZ(IE)/DBLE(NSPINPOT)
C
C=======================================================================
C non/scalar-relativistic OR relativistic
C
         IF ( KREL.EQ.0 ) THEN
            CALL WFMESH(ERYD,EK,CVLIGHT,NSRA,ZAT,R,S,RS,IRCUT(IPAN),
     &                  IRMD,LMAXD)
            CALL CRADWF(ERYD,EK,NSRA,ALPHA,IPAN,IRCUT,CVLIGHT,RS,S,
     &                  PZ,FZ,QZ,SZ,TMAT,VISP,DRDI,R,ZAT,LIRRSOL,
     &                  IDOLDAU,LOPT,WLDAUAV,CUTOFF)
C-----------------------------------------------------------------------
C non-spherical
C
            IF (INS.GT.0) CALL PNSQNS(AR,CR,DR,DRDI,EK,ICST,PZ,QZ,FZ,SZ,
     &                                PNS,QNS,NSRA,VINS,IPAN,IRCUT,
     &                                CLEB,ICLEB,IEND,LOFLM,LMAXD,
     &                                IDOLDAU,LOPT,LMLO,LMHI,
     &                                WLDAU(1,1,ISPIN),WLDAUAV,CUTOFF)
C
            DO L = 0,LMAXD
               EKL(L) = EK*DBLE(2*L+1)
            END DO
C-----------------------------------------------------------------------
C spherical/non-spherical input potential
C
            IF ( INS.EQ.0 ) THEN
               CALL RHOLM(DEN(0,IE),DF,GMATLL(1,1,IE),NSRA,
     +              RHO2NS(1,1,ISPIN),DRDI,IPAN,IRCUT,PZ,FZ,QZ,SZ,
     +              CLEB(1,1),ICLEB,IEND,JEND,EKL)
            ELSE
               CALL RHONS(DEN(0,IE),DF,DRDI,GMATLL(1,1,IE),EK,
     +              RHO2NS(1,1,ISPIN),IPAN,IRCUT,THETAS,IFUNM,LMSP,
     +              NSRA,QNS,PNS,AR,CR,PZ,FZ,QZ,SZ,CLEB(1,1),ICLEB,
     +              JEND,IEND,EKL)
            END IF
C
C-----------------------------------------------------------------------
            DO L = 0,LMAXD1
               ESPV(L,ISPIN) = ESPV(L,ISPIN) + DIMAG(ERYD*DEN(L,IE)*DF)
            END DO
C
C ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C     get the charge at the Fermi energy (IELAST)
C     call RHOLM/RHONS with the energy weight CONE --> not overwrite DF
C                      with the dummy DENDUM       --> not overwrite DEN
C
            IF ( (IE.EQ.IELAST) .AND. LDORHOEF ) THEN
               IF (INS.EQ.0) THEN
                  CALL RHOLM(DENDUM,CONE,GMATLL(1,1,IE),NSRA,
     +                 R2NEF(1,1,ISPIN),DRDI,IPAN,IRCUT,PZ,FZ,QZ,SZ,
     +                 CLEB(1,1),ICLEB,IEND,JEND,EKL)
               ELSE
                  CALL RHONS(DENDUM,CONE,DRDI,GMATLL(1,1,IE),EK,
     +                 R2NEF(1,1,ISPIN),IPAN,IRCUT,THETAS,IFUNM,LMSP,
     +                 NSRA,QNS,PNS,AR,CR,PZ,FZ,QZ,SZ,CLEB(1,1),ICLEB,
     +                 JEND,IEND,EKL)
               END IF
            END IF
C ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
C=======================================================================
         ELSE
C=======================================================================
            CALL DRVRHO(LDORHOEF,RHO2NS,R2NEF,DEN,DMUORB,RHOORB,
     &                  IE,ERYD,DF,LASTEZ,
     &                  GMATLL,VTREL,BTREL,RMREL,DRDIREL,
     &                  R2DRDIREL,ZREL,JWSREL,IRSHIFT,SOLVER,SOCTL,CTL,
     &                  QMTET,QMPHI,ITERMVDIR,MVEVIL,MVEVILEF,LMMAXD,
     &                  LMAXD,IRMD,LMPOTD,IEMXD,NMVECMAX)
C
            DO L = 0,LMAXD1
               ESPV(L,1) = ESPV(L,1) + DIMAG(ERYD*DEN(L,IE)*DF)
               ESPV(L,2) = ESPV(L,2) + DIMAG(ERYD*DEN(L,IE+IEMXD)*DF)
            END DO
C
            DO IR = 1,3
               DO L = 0,LMAXD
                  MUORB(L,IR) = MUORB(L,IR) + DIMAG(DMUORB(L,IR)*DF)
               END DO
            END DO
            write(99,fmt='(10e12.4)') ((muorb(l,ir),l=0,2),ir=1,3) ! test fivos
         END IF
C
C non/scalar-relativistic OR relativistic
C=======================================================================
C
C LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
C LDA+U calculation 
         IF ( ( IDOLDAU.EQ.1 ).AND.( LOPT.GE.0 ) ) 
     &        CALL DENSITYMAT(DF,PZ,QZ,PNS,QNS,AR,CR,DR,GMATLL(1,1,IE),
     &                        IPAN,IRCUT,DRDI,EK,
     &                        IRMIN,LOPT,MMAX,LMLO,LMHI,PHILDAU,DENMATC)
C
C LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
C
CMPI     END IF
      END DO
C EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
C        
      IF ( IHOST.NE.1) RETURN
C
      IF (ISPIN.EQ.2) THEN
         IDIM = IRMD*LMPOTD
         CALL DSCAL(IDIM,2.D0,RHO2NS(1,1,1),1)
         CALL DAXPY(IDIM,-0.5D0,RHO2NS(1,1,1),1,RHO2NS(1,1,2),1)
         CALL DAXPY(IDIM,1.0D0,RHO2NS(1,1,2),1,RHO2NS(1,1,1),1)
C
C --> do the same at the Fermi energy
C
         CALL DSCAL(IDIM,2.D0,R2NEF(1,1,1),1)
         CALL DAXPY(IDIM,-0.5D0,R2NEF(1,1,1),1,R2NEF(1,1,2),1)
         CALL DAXPY(IDIM,1.0D0,R2NEF(1,1,2),1,R2NEF(1,1,1),1)
      END IF
C
      END
