# docker image containing Developlement Tools and the current Intel compilers based on CentOS 7
image: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers


before_script:
  # set +e prevents sourced scripts from aborting if single commands fail (GitLab CI sets `-e` by default)
  - set +e && source compilervars.sh intel64 && set -e
  ## install pip
  #- curl -O https://bootstrap.pypa.io/get-pip.py 
  #- python get-pip.py 
  #- pip install numpy
  # set environment variables to avoind stack size issue
  - export OMP_NUM_THREADS=1
  - export OMP_STACKSIZE=1g
  - ulimit -s unlimited


stages:
  - test
  - build
  - run
  - verify


test:intel:
  stage: test
  script:
    # test if dependencies are working
    - echo 'do some tests here'

build:intel:mpi:
  stage: build
  script:
    # compile code
    - cp tests/inc.p_1 inc.p
    #- make clean; make mpi; cp kkr.x kkr.x_mpi
    # dummy copy 
    - cp inc.p kkr.x_mpi
  artifacts:
    paths:
      - kkr.x_mpi
    expire_in: 1 day


run:intel:aiida-kkr:
  image: iffregistry.fz-juelich.de/docker-images/aiida-kkr:latest
  stage: run
  services:
    - name: postgres:latest
      alias: db
    - name: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/slurm-daemon:latest
      alias: c1
    - name: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/slurm-daemon:latest
      alias: c2
    - name: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/slurm-daemon:latest
      alias: c3
    - name: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/slurm-daemon:latest
      alias: c4
  variables:
    POSTGRES_USER: aiida
    POSTGRES_DB: aiida_default
    POSTGRES_PASSWORD: password
  script:
    #- export
    #- cat /etc/shells
    #- chsh -s /bin/bash root  
    #- find /SCRATCH -type d -exec chmod 777 {} \;
    #- umask
    - umask 000
    #- mkdir -m777 /SCRATCH && mkdir -m777 /SCRATCH/root && mkdir -m777 /SCRATCH/root/aiida_run
    #- chmod -R 777 /SCRATCH/
    - mkdir "${KKR_EXECUTABLE_DIR}"
    #/opt/KKRcode
    - cp kkr.x_mpi "${KKR_EXECUTABLE_PATH}"
    - echo 'start daemon and check status of aiida daemon'
    - export C_FORCE_ROOT='true'
    - verdi devel setproperty logging.celery_loglevel INFO
    - verdi devel setproperty logging.aiida_loglevel INFO
    - verdi daemon restart
    #- verdi daemon status
    #- cat /root/.aiida/daemon/log/celery.log
    #- echo 'check computer configuration'
    #- verdi computer list
    #- verdi computer show slurmcontrol
    #- verdi computer test slurmcontrol
    #- echo 'check calculation plugins'
    #- verdi calculation plugins
    #- echo 'check codes'
    #- verdi code list
    #- verdi code show 1
    - echo 'add voronoi code'
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@iffgit.fz-juelich.de/kkr/voronoi.git voronoi
    - cd voronoi/prog/ && make && cd ../../
    - verdi code setup < "tests/tools/setup_voronoi_aiida.txt" 
    #- echo 'check voronoi code setup'
    #- echo 'check codes'
    #- verdi code list
    #- verdi code show 2
    - echo 'run simple calculation'
    - tests/tools/aiida_simple_test.py
    - verdi work list -a
    - verdi calculation list -a
    - verdi work report 6
    - verdi calculation show 11
    - verdi calculation logshow 11
    - verdi daemon status
    - cat /root/.aiida/daemon/log/celery.log
    #- cp /SCRATCH/root/aiida_run/*/*/*/{inputcard,_aiidasubmit.sh} .
    #- sbatch --test-only _aiidasubmit.sh
    #- sbatch _aiidasubmit.sh
    #- squeue -u root && sleep 15 && squeue -u root
    #- ls -la . && pwd && cat out_voronoi
    #- cat _aiidasubmit.sh
    #- mkdir /test_scratch && cp /SCRATCH/root/aiida_run/*/*/*/{inputcard,_aiidasubmit.sh} /test_scratch/ && cd /test_scratch
    #- sbatch _aiidasubmit.sh
    #- squeue -u root && sleep 15 && squeue -u root
    #- ls -la . && pwd && cat out_voronoi
    - cd $( dirname /builds/aiida_run/*/*/*/_aiidasubmit.sh)
    - pwd
    - sbatch '_aiidasubmit.sh'
    - squeue -u root && sleep 15 && squeue -u root
    #- ls
    #- sbatch _aiidasubmit.sh
    #- squeue -u root && sleep 15 && squeue -u root
    #- ls -la . && ls -la /SCRATCH/root/aiida_run && ls -la /SCRATCH && cat out_voronoi
    - ls -la . && cat out_voronoi
    # - sacct -u root
  artifacts:
    paths:
      - /builds/aiida_run/*/*/*/inputcard
      - /builds/aiida_run/*/*/*/_aiidasubmit.sh
      - /root/.aiida/daemon/log/celery.log
    expire_in: 1 day


verify:intel:
  stage: verify
  script:
    - echo 'implement tests ...'
