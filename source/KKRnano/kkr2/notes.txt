Stack size:

the program needs a large amount of stack space, otherwise segfaults:
(space needed depends mainly on lmax and number of mesh points...)

Use this environment variable, when using OpenMP-threads:
export OMP_STACKSIZE=20M

Without OpenMP threads, one might have to set:
ulimit -s 20000

Interpolation of potential to new mesh and on-the-fly shape-function generation

*) kkr0 can create only meshes and potentials with an equal number of mesh points
*) A shapefun file has to be provided to specify the initial interstitial mesh
   (Use the mapping of atom to shape in 'atominfo' - NTCELL)
*) the shape-functions in 'shapefun' are not used! (but have to be specified
   to avoid I/O errors in kkr0)
*) The interstitial mesh in shapefun changes if the muffin-tin radius changes
   (due to 'muffin-tinization', where points of the MT-region are added to the
   interstitial mesh)
*) When MT_scale = 0.0, the muffin-tin radii specified in atominfo will be
   used

Possible problems:

*) Number of mesh points depends on an algorithm using floating point numbers:
   However, processes working on the same atom must arrive at the same results.
   Otherwise there will be problems with spin/energy-parallelisation
   Workaround: If problems occur: calculate without spin/energy-parallelisation

*) Interpolation to a larger muffin-tin radius problematic,
   since spline polynomial at boundary is unbounded, it blows up when r > rmax
   Workaround: do several calculations, moving atoms in small steps only

*) Small deviations observed when restarting a calculation (6. digit after .):
   Deviations were much larger when a converged potential was used
   Reason: mesh interpolation
   Fixed: check if mesh has changed - do not interpolate if mesh stays the same
   STILL OCCURS

*) Convergence problems with lmax=5
   TODO: check if only for irregular lattice positions
   
*) I/O with several processes writing to the same file can lead to problems
   (e.g. on RWTH cluster with Lustre filesystem)
   Solution: use task-local files

Task-local files:

*) Compile with preprocessor-macro TASKLOCAL_FILES defined to get
   a version that uses task-local files for meshes and potentials instead of
   Fortran direct access files 

Checkpointing:
*) Files needed to restart a calculation:
   energy_mesh, vpotnew, vpotnew.idx, meshes, meshes.idx
   
*) To restart calculation:
   -) run kkr0 *first*
   -) then rename them to:
      energy_mesh.0, vpotnew.0, vpotnew.0.idx, meshes.0, meshes.0.idx
      
kkr0:
*) kkr0 can generate a start potential from a formatted potential file named
   'potential' and a shape-function file 'shapefun'
   
*) This only works for potentials which use the same radial mesh for all atoms

*) Start potential generation can be skipped by removing/renaming file 'potential'
   and providing an approximate Fermi-energy in file 'EFERMI' (used for k-mesh
   generation heuristics)

Some Bugs:

*) Fermi energy in formatted DOS output is not the correct Fermi energy
*) Title in DOS files is not correct

*) k-mesh depends on Fermi-Energy from 'potential' file, which is not the
   actual one

*) if one uses a saved energy-mesh or kpoints and makes changes
   affecting the energy-mesh in input.conf then this asks for trouble